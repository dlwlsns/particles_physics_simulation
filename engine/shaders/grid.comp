#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Uniforms:
uniform float deltaFrameTime;

layout(std430, binding = 3) buffer vboTransform
{
    vec4 matrices[];
};

layout(std430, binding = 10) buffer ssboGridCounter
{
    int counters[];
};

layout(std430, binding = 11) buffer ssboGrid
{
    int cells[];
};
    
int spheres = 1000;
float border = 0.5;
int n_cells = 2;
float dim = border * 2;
float cell_size = dim / n_cells;

int getCell(int i){
    int cell = -1;

    vec3 min = vec3(-border, 0.0, -border);
    vec3 max = vec3(border, 10.0, border);

    if(min.x > matrices[i].x || max.x < matrices[i].x || 
        min.y > matrices[i].y || max.y < matrices[i].y ||
        min.z > matrices[i].z || max.z < matrices[i].z){
        return cell;
    }

    int x_cell = int((matrices[i].x - min.x) / cell_size);
    int y_cell = int((matrices[i].y - min.y) / cell_size);
    int z_cell = int((matrices[i].z - min.z) / cell_size);

    cell = x_cell + n_cells * (y_cell + n_cells * z_cell);

    return cell;
}

void main(void)
{
    for(int i = 0; i < spheres; i++){
        int cell = getCell(i);

        cells[cell * spheres + counters[cell]] = i;
        counters[cell]++;
    }
}